messaging, use-cases:

init:

C: - sends hello-no-feedback-please message where it states its client_nickname
     (hello-no-feedback-please is technically a normal hello message with empty client_URL)
S: - wants now to create a "(display) server level collection (SLC)" for this client
   - sets client_URL to "no_feedback"
   - finds SLC that matches in client_nickname and client_URL
     - not found -> create a new one
   - does not reply anything

C: - sends hello message where it states its client_nickname and client_URL
S: - wants now to create a "(display) server level collection (SLC)" for this client
   - finds SLC that matches in client_nickname and client_URL
     - not found -> create a new one
   - replies with "ready" (to test the backward connection)
   - does not reply anything
   - BUT, should try to "ping" client_URL for a connection test...


to display data:

C: - sends batches of graphics
     - one batch is completely displayed using the instancing
     - content (individual graphics elements) of one batch is thus indifferent, act as one
     - every batch belongs to a certain client's collection_name
     - we envisioned that different client's collections hold semantically different data/graphics
   - each batch is defined with client_nickname, collection_name (plus its ID)
   - each batch further contains a stream of spheres, lines and vectors
   - each graphics element uses xyzt coordinates, rgb color or index to a color palette
S: - finds SLC matching the client_nickname
     - not found -> reuse-or-create "anonymous/no_feedback" SLC
   - finds collection that matches in collection_name and display_time
     - not found -> create a new one
   - adds (not overwrites) the display data (spheres, lines or vectors)
   - replaces (does overwrite) the display data (spheres, lines or vectors)
   - (there are two syntactically the same messages, but one appends and one overwrites)

