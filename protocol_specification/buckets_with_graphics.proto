syntax = "proto3";

package transfers_graphics_protocol;
option java_package = "cz.it4i.ulman.transfers.graphics.protocol";


service ClientToServer {
	/**
	 * client should start communication with this message,
	 * in this message the client may (not "must") additionally register
	 * a call back URL at which the server will be sending notifications
	 *
	 * if this message is omited, unmatched incoming requests will
	 * be placed into "unknown_source" collection
	 */
	rpc introduceClient(ClientHello) returns (Empty) {}

	/**
	 * one bucket of one-type-of-graphics is requested to be displayed,
	 * this request shall contain a burst/batch of instances that all
	 * shall appear in this created bucket
	 *
	 * since the display need not be able to distinguish among instances
	 * within a bucket, only an ID of the bucket is transfered and no IDs
	 * for the individual instances
	 */
	rpc     addGraphics (stream BatchOfGraphics) returns (Empty) {}
	rpc replaceGraphics (stream BatchOfGraphics) returns (Empty) {}

	rpc showMessage (SignedTextMessage) returns (Empty) {}

	rpc focusEvent   (SignedClickedIDs)     returns (Empty) {}
	rpc unfocusEvent (ClientIdentification) returns (Empty) {}

	rpc selectEvent   (SignedClickedIDs) returns (Empty) {}
	rpc unselectEvent (SignedClickedIDs) returns (Empty) {}
	//unselectAllEvent
	//selectAllEvent

	//upload (also replaces) color palette (palette_name, [name,r,g,b]+)
	//delete color palette
}


service ServerToClient {
	rpc showMessage (TextMessage) returns (Empty) {}

	rpc focusEvent   (ClickedIDs) returns (Empty) {}
	rpc unfocusEvent (Empty)      returns (Empty) {}

	rpc selectEvent   (ClickedIDs) returns (Empty) {}
	rpc unselectEvent (ClickedIDs) returns (Empty) {}
}


message Empty {
}

message ClientIdentification {
	string clientName = 1;
}

message ClientHello {
	// name of source
	ClientIdentification clientID = 1;

	// URL for server-to-source communication, can be empty string too
	string returnURL = 2;
}


/**
 * Everything in the batch is treated as one non-dividable entity.
 * The graphics elements, which is the content of this message, is
 * indistinguishable among themselves, and it makes no sense to assign them
 * anything specific to them, anything individual. As a consequence, the
 * source clientID, dataName, dataID etc. is given for the full batch and is
 * understood to be valid for its full content, for all graphics element inside.
 *
 * In Blender, for example, it appears as one Blender object (listed as
 * one element in the Outliner panel) that displays its content (which
 * is the content of this message) using the instancing mechanism.
 */
message BatchOfGraphics {
	ClientIdentification clientID = 1;
	string collectionName  = 2;   // Label/name of this collection
	string dataName        = 5;   // Label/name of this data group
	uint64 dataID          = 6;   // ID in the realm of the source
	//select color palette
	repeated Graphics data = 9;
}

message Graphics {
	oneof shape {
		SphereParameters sphere = 1;
		LineParameters line     = 2;
		VectorParameters vector = 3;
	}
}


message Vector3D {
	float x = 1;
	float y = 2;
	float z = 3;
}

message SphereParameters {
	Vector3D centre  = 1;
	uint32 time      = 3;
	float radius     = 4;
	oneof color {
		uint32 colorXRGB = 5;
		uint32 colorIdx  = 6;
	}
}

message LineParameters {
	Vector3D startPos = 1;
	Vector3D endPos   = 2;
	uint32 time       = 3;
	float radius      = 4;
	oneof color {
		uint32 colorXRGB = 5;
		uint32 colorIdx  = 6;
	}
}

message VectorParameters {
	Vector3D startPos = 1;
	Vector3D endPos   = 2;
	uint32 time       = 3;
	float radius      = 4;
	oneof color {
		uint32 colorXRGB = 5;
		uint32 colorIdx  = 6;
	}
}


message TextMessage {
	string msg = 1;  // any message which the server is asked to possibly display
}

message SignedTextMessage {
	ClientIdentification clientID = 1;
	TextMessage clientMessage = 2;
}


message ClickedIDs {
	repeated uint64 objIDs = 1;
}

message SignedClickedIDs {
	ClientIdentification clientID = 1;
	ClickedIDs clientClickedIDs = 2;
}
