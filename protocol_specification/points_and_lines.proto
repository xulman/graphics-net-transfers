syntax = "proto3";

package transfers_graphics_protocol;
option java_package = "cz.it4i.ulman.transfers.graphics.protocol";

service PointsAndLines {
	rpc addSphere (stream SphereParameters) returns (Empty) {}
	rpc addEllipsoid (stream EllipsoidParameters) returns (Empty) {}
	rpc addLine (stream LineParameters) returns (Empty) {}
	rpc addLineBetweenSpheres (stream LineBetweenObjectsParameters) returns (Empty) {}
	rpc showMessage (TextMessage) returns (Empty) {}
}

message Empty {
}

message Vector3D {
	float x = 1;
	float y = 2;
	float z = 3;
}

message Matrix3D {
	float a11 = 1;
	float a12 = 2;
	float a13 = 3;
	float a21 = 4;
	float a22 = 5;
	float a23 = 6;
	float a31 = 7;
	float a32 = 8;
	float a33 = 9;
}

message SphereParameters {
	uint64 ID = 1;       // non-negative fixed ID to reference this point
	Vector3D centre = 2; // z-coordinate of the point's centre
	int32 t = 3;         // temporal coordinate of the point
	string label = 4;    // label associated with this point, need not be unique
	uint32 color = 5;   // blue-element of the point's color, in range 0 to 1 inclusive
	float radius = 6;   // radius in same units as x,y,z to draw this point as a sphere
}

message EllipsoidParameters {
	uint64 ID = 1;       // non-negative fixed ID to reference this point
	Vector3D centre = 2;         // z-coordinate of the point's centre
	int32 t = 3;         // temporal coordinate of the point
	string label = 4;    // label associated with this point, need not be unique
	uint32 color = 5;   // blue-element of the point's color, in range 0 to 1 inclusive
	Matrix3D shape_matrix = 6; // elements of a 3x3 matrix to define shape of the ellipsoid,
	                              // give first ROW, then second ROW
}

message LineParameters {
	uint64 ID = 1;       // non-negative fixed ID to reference this line
	Vector3D from = 2;
	Vector3D to = 3;
	string label = 4;    // label associated with this line, need not be unique
	uint32 color = 5;  // blue-element of the line's color, in range 0 to 1 inclusive
	float radius = 6;   // radius in same units as x,y,z to draw this line as a cylinder
}

message LineBetweenObjectsParameters {
	uint64 ID = 1;       // non-negative fixed ID to reference this line
	uint64 from_pointID = 2;  // x-coordinate of the line's start
	uint64 to_pointID = 3;    // x-coordinate of the line's end
	string label = 4;    // label associated with this line, need not be unique
	uint32 color = 5;   // blue-element of the line's color, in range 0 to 1 inclusive
	float radius = 5;    // radius in same units as x,y,z to draw this line as a cylinder
}

message TextMessage {
	string text = 1;  // any message which the server is asked to possibly display
}

