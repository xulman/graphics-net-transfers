// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: points_and_lines.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_points_5fand_5flines_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_points_5fand_5flines_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_points_5fand_5flines_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_points_5fand_5flines_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_points_5fand_5flines_2eproto;
namespace transfers_graphics_protocol {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class LineWithIDs;
struct LineWithIDsDefaultTypeInternal;
extern LineWithIDsDefaultTypeInternal _LineWithIDs_default_instance_;
class LineWithPositions;
struct LineWithPositionsDefaultTypeInternal;
extern LineWithPositionsDefaultTypeInternal _LineWithPositions_default_instance_;
class PointAsBall;
struct PointAsBallDefaultTypeInternal;
extern PointAsBallDefaultTypeInternal _PointAsBall_default_instance_;
class PointAsEllipsoid;
struct PointAsEllipsoidDefaultTypeInternal;
extern PointAsEllipsoidDefaultTypeInternal _PointAsEllipsoid_default_instance_;
class TickMessage;
struct TickMessageDefaultTypeInternal;
extern TickMessageDefaultTypeInternal _TickMessage_default_instance_;
}  // namespace transfers_graphics_protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::transfers_graphics_protocol::Empty* Arena::CreateMaybeMessage<::transfers_graphics_protocol::Empty>(Arena*);
template<> ::transfers_graphics_protocol::LineWithIDs* Arena::CreateMaybeMessage<::transfers_graphics_protocol::LineWithIDs>(Arena*);
template<> ::transfers_graphics_protocol::LineWithPositions* Arena::CreateMaybeMessage<::transfers_graphics_protocol::LineWithPositions>(Arena*);
template<> ::transfers_graphics_protocol::PointAsBall* Arena::CreateMaybeMessage<::transfers_graphics_protocol::PointAsBall>(Arena*);
template<> ::transfers_graphics_protocol::PointAsEllipsoid* Arena::CreateMaybeMessage<::transfers_graphics_protocol::PointAsEllipsoid>(Arena*);
template<> ::transfers_graphics_protocol::TickMessage* Arena::CreateMaybeMessage<::transfers_graphics_protocol::TickMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transfers_graphics_protocol {

// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:transfers_graphics_protocol.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit constexpr Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transfers_graphics_protocol.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transfers_graphics_protocol.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_points_5fand_5flines_2eproto;
};
// -------------------------------------------------------------------

class PointAsBall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transfers_graphics_protocol.PointAsBall) */ {
 public:
  inline PointAsBall() : PointAsBall(nullptr) {}
  ~PointAsBall() override;
  explicit constexpr PointAsBall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointAsBall(const PointAsBall& from);
  PointAsBall(PointAsBall&& from) noexcept
    : PointAsBall() {
    *this = ::std::move(from);
  }

  inline PointAsBall& operator=(const PointAsBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointAsBall& operator=(PointAsBall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointAsBall& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointAsBall* internal_default_instance() {
    return reinterpret_cast<const PointAsBall*>(
               &_PointAsBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointAsBall& a, PointAsBall& b) {
    a.Swap(&b);
  }
  inline void Swap(PointAsBall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointAsBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointAsBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointAsBall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointAsBall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointAsBall& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointAsBall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transfers_graphics_protocol.PointAsBall";
  }
  protected:
  explicit PointAsBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 6,
    kIDFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kTFieldNumber = 5,
    kColorRFieldNumber = 7,
    kColorGFieldNumber = 8,
    kColorBFieldNumber = 9,
    kRadiusFieldNumber = 10,
  };
  // string label = 6;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // uint64 ID = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // int32 t = 5;
  void clear_t();
  int32_t t() const;
  void set_t(int32_t value);
  private:
  int32_t _internal_t() const;
  void _internal_set_t(int32_t value);
  public:

  // float color_r = 7;
  void clear_color_r();
  float color_r() const;
  void set_color_r(float value);
  private:
  float _internal_color_r() const;
  void _internal_set_color_r(float value);
  public:

  // float color_g = 8;
  void clear_color_g();
  float color_g() const;
  void set_color_g(float value);
  private:
  float _internal_color_g() const;
  void _internal_set_color_g(float value);
  public:

  // float color_b = 9;
  void clear_color_b();
  float color_b() const;
  void set_color_b(float value);
  private:
  float _internal_color_b() const;
  void _internal_set_color_b(float value);
  public:

  // float radius = 10;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:transfers_graphics_protocol.PointAsBall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  uint64_t id_;
  float x_;
  float y_;
  float z_;
  int32_t t_;
  float color_r_;
  float color_g_;
  float color_b_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_points_5fand_5flines_2eproto;
};
// -------------------------------------------------------------------

class PointAsEllipsoid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transfers_graphics_protocol.PointAsEllipsoid) */ {
 public:
  inline PointAsEllipsoid() : PointAsEllipsoid(nullptr) {}
  ~PointAsEllipsoid() override;
  explicit constexpr PointAsEllipsoid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointAsEllipsoid(const PointAsEllipsoid& from);
  PointAsEllipsoid(PointAsEllipsoid&& from) noexcept
    : PointAsEllipsoid() {
    *this = ::std::move(from);
  }

  inline PointAsEllipsoid& operator=(const PointAsEllipsoid& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointAsEllipsoid& operator=(PointAsEllipsoid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointAsEllipsoid& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointAsEllipsoid* internal_default_instance() {
    return reinterpret_cast<const PointAsEllipsoid*>(
               &_PointAsEllipsoid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointAsEllipsoid& a, PointAsEllipsoid& b) {
    a.Swap(&b);
  }
  inline void Swap(PointAsEllipsoid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointAsEllipsoid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointAsEllipsoid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointAsEllipsoid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointAsEllipsoid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointAsEllipsoid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointAsEllipsoid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transfers_graphics_protocol.PointAsEllipsoid";
  }
  protected:
  explicit PointAsEllipsoid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatElemFieldNumber = 10,
    kLabelFieldNumber = 6,
    kIDFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kTFieldNumber = 5,
    kColorRFieldNumber = 7,
    kColorGFieldNumber = 8,
    kColorBFieldNumber = 9,
  };
  // repeated float mat_elem = 10;
  int mat_elem_size() const;
  private:
  int _internal_mat_elem_size() const;
  public:
  void clear_mat_elem();
  private:
  float _internal_mat_elem(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mat_elem() const;
  void _internal_add_mat_elem(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mat_elem();
  public:
  float mat_elem(int index) const;
  void set_mat_elem(int index, float value);
  void add_mat_elem(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mat_elem() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mat_elem();

  // string label = 6;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // uint64 ID = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // int32 t = 5;
  void clear_t();
  int32_t t() const;
  void set_t(int32_t value);
  private:
  int32_t _internal_t() const;
  void _internal_set_t(int32_t value);
  public:

  // float color_r = 7;
  void clear_color_r();
  float color_r() const;
  void set_color_r(float value);
  private:
  float _internal_color_r() const;
  void _internal_set_color_r(float value);
  public:

  // float color_g = 8;
  void clear_color_g();
  float color_g() const;
  void set_color_g(float value);
  private:
  float _internal_color_g() const;
  void _internal_set_color_g(float value);
  public:

  // float color_b = 9;
  void clear_color_b();
  float color_b() const;
  void set_color_b(float value);
  private:
  float _internal_color_b() const;
  void _internal_set_color_b(float value);
  public:

  // @@protoc_insertion_point(class_scope:transfers_graphics_protocol.PointAsEllipsoid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mat_elem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  uint64_t id_;
  float x_;
  float y_;
  float z_;
  int32_t t_;
  float color_r_;
  float color_g_;
  float color_b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_points_5fand_5flines_2eproto;
};
// -------------------------------------------------------------------

class LineWithPositions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transfers_graphics_protocol.LineWithPositions) */ {
 public:
  inline LineWithPositions() : LineWithPositions(nullptr) {}
  ~LineWithPositions() override;
  explicit constexpr LineWithPositions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineWithPositions(const LineWithPositions& from);
  LineWithPositions(LineWithPositions&& from) noexcept
    : LineWithPositions() {
    *this = ::std::move(from);
  }

  inline LineWithPositions& operator=(const LineWithPositions& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineWithPositions& operator=(LineWithPositions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LineWithPositions& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineWithPositions* internal_default_instance() {
    return reinterpret_cast<const LineWithPositions*>(
               &_LineWithPositions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LineWithPositions& a, LineWithPositions& b) {
    a.Swap(&b);
  }
  inline void Swap(LineWithPositions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineWithPositions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineWithPositions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineWithPositions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LineWithPositions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LineWithPositions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineWithPositions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transfers_graphics_protocol.LineWithPositions";
  }
  protected:
  explicit LineWithPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 8,
    kIDFieldNumber = 1,
    kFromXFieldNumber = 2,
    kFromYFieldNumber = 3,
    kFromZFieldNumber = 4,
    kToXFieldNumber = 5,
    kToYFieldNumber = 6,
    kToZFieldNumber = 7,
    kColorRFieldNumber = 9,
    kColorGFieldNumber = 10,
    kColorBFieldNumber = 11,
    kRadiusFieldNumber = 12,
  };
  // string label = 8;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // uint64 ID = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // float from_x = 2;
  void clear_from_x();
  float from_x() const;
  void set_from_x(float value);
  private:
  float _internal_from_x() const;
  void _internal_set_from_x(float value);
  public:

  // float from_y = 3;
  void clear_from_y();
  float from_y() const;
  void set_from_y(float value);
  private:
  float _internal_from_y() const;
  void _internal_set_from_y(float value);
  public:

  // float from_z = 4;
  void clear_from_z();
  float from_z() const;
  void set_from_z(float value);
  private:
  float _internal_from_z() const;
  void _internal_set_from_z(float value);
  public:

  // float to_x = 5;
  void clear_to_x();
  float to_x() const;
  void set_to_x(float value);
  private:
  float _internal_to_x() const;
  void _internal_set_to_x(float value);
  public:

  // float to_y = 6;
  void clear_to_y();
  float to_y() const;
  void set_to_y(float value);
  private:
  float _internal_to_y() const;
  void _internal_set_to_y(float value);
  public:

  // float to_z = 7;
  void clear_to_z();
  float to_z() const;
  void set_to_z(float value);
  private:
  float _internal_to_z() const;
  void _internal_set_to_z(float value);
  public:

  // float color_r = 9;
  void clear_color_r();
  float color_r() const;
  void set_color_r(float value);
  private:
  float _internal_color_r() const;
  void _internal_set_color_r(float value);
  public:

  // float color_g = 10;
  void clear_color_g();
  float color_g() const;
  void set_color_g(float value);
  private:
  float _internal_color_g() const;
  void _internal_set_color_g(float value);
  public:

  // float color_b = 11;
  void clear_color_b();
  float color_b() const;
  void set_color_b(float value);
  private:
  float _internal_color_b() const;
  void _internal_set_color_b(float value);
  public:

  // float radius = 12;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:transfers_graphics_protocol.LineWithPositions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  uint64_t id_;
  float from_x_;
  float from_y_;
  float from_z_;
  float to_x_;
  float to_y_;
  float to_z_;
  float color_r_;
  float color_g_;
  float color_b_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_points_5fand_5flines_2eproto;
};
// -------------------------------------------------------------------

class LineWithIDs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transfers_graphics_protocol.LineWithIDs) */ {
 public:
  inline LineWithIDs() : LineWithIDs(nullptr) {}
  ~LineWithIDs() override;
  explicit constexpr LineWithIDs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LineWithIDs(const LineWithIDs& from);
  LineWithIDs(LineWithIDs&& from) noexcept
    : LineWithIDs() {
    *this = ::std::move(from);
  }

  inline LineWithIDs& operator=(const LineWithIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline LineWithIDs& operator=(LineWithIDs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LineWithIDs& default_instance() {
    return *internal_default_instance();
  }
  static inline const LineWithIDs* internal_default_instance() {
    return reinterpret_cast<const LineWithIDs*>(
               &_LineWithIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LineWithIDs& a, LineWithIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(LineWithIDs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LineWithIDs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LineWithIDs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LineWithIDs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LineWithIDs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LineWithIDs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LineWithIDs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transfers_graphics_protocol.LineWithIDs";
  }
  protected:
  explicit LineWithIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 4,
    kIDFieldNumber = 1,
    kFromPointIDFieldNumber = 2,
    kToPointIDFieldNumber = 3,
    kColorRFieldNumber = 5,
    kColorGFieldNumber = 6,
    kColorBFieldNumber = 7,
    kRadiusFieldNumber = 8,
  };
  // string label = 4;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // uint64 ID = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 from_pointID = 2;
  void clear_from_pointid();
  uint64_t from_pointid() const;
  void set_from_pointid(uint64_t value);
  private:
  uint64_t _internal_from_pointid() const;
  void _internal_set_from_pointid(uint64_t value);
  public:

  // uint64 to_pointID = 3;
  void clear_to_pointid();
  uint64_t to_pointid() const;
  void set_to_pointid(uint64_t value);
  private:
  uint64_t _internal_to_pointid() const;
  void _internal_set_to_pointid(uint64_t value);
  public:

  // float color_r = 5;
  void clear_color_r();
  float color_r() const;
  void set_color_r(float value);
  private:
  float _internal_color_r() const;
  void _internal_set_color_r(float value);
  public:

  // float color_g = 6;
  void clear_color_g();
  float color_g() const;
  void set_color_g(float value);
  private:
  float _internal_color_g() const;
  void _internal_set_color_g(float value);
  public:

  // float color_b = 7;
  void clear_color_b();
  float color_b() const;
  void set_color_b(float value);
  private:
  float _internal_color_b() const;
  void _internal_set_color_b(float value);
  public:

  // float radius = 8;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:transfers_graphics_protocol.LineWithIDs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  uint64_t id_;
  uint64_t from_pointid_;
  uint64_t to_pointid_;
  float color_r_;
  float color_g_;
  float color_b_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_points_5fand_5flines_2eproto;
};
// -------------------------------------------------------------------

class TickMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transfers_graphics_protocol.TickMessage) */ {
 public:
  inline TickMessage() : TickMessage(nullptr) {}
  ~TickMessage() override;
  explicit constexpr TickMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TickMessage(const TickMessage& from);
  TickMessage(TickMessage&& from) noexcept
    : TickMessage() {
    *this = ::std::move(from);
  }

  inline TickMessage& operator=(const TickMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickMessage& operator=(TickMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TickMessage* internal_default_instance() {
    return reinterpret_cast<const TickMessage*>(
               &_TickMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TickMessage& a, TickMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TickMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TickMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TickMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TickMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TickMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transfers_graphics_protocol.TickMessage";
  }
  protected:
  explicit TickMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:transfers_graphics_protocol.TickMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_points_5fand_5flines_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// PointAsBall

// uint64 ID = 1;
inline void PointAsBall::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t PointAsBall::_internal_id() const {
  return id_;
}
inline uint64_t PointAsBall::id() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.ID)
  return _internal_id();
}
inline void PointAsBall::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void PointAsBall::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.ID)
}

// float x = 2;
inline void PointAsBall::clear_x() {
  x_ = 0;
}
inline float PointAsBall::_internal_x() const {
  return x_;
}
inline float PointAsBall::x() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.x)
  return _internal_x();
}
inline void PointAsBall::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PointAsBall::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.x)
}

// float y = 3;
inline void PointAsBall::clear_y() {
  y_ = 0;
}
inline float PointAsBall::_internal_y() const {
  return y_;
}
inline float PointAsBall::y() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.y)
  return _internal_y();
}
inline void PointAsBall::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PointAsBall::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.y)
}

// float z = 4;
inline void PointAsBall::clear_z() {
  z_ = 0;
}
inline float PointAsBall::_internal_z() const {
  return z_;
}
inline float PointAsBall::z() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.z)
  return _internal_z();
}
inline void PointAsBall::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PointAsBall::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.z)
}

// int32 t = 5;
inline void PointAsBall::clear_t() {
  t_ = 0;
}
inline int32_t PointAsBall::_internal_t() const {
  return t_;
}
inline int32_t PointAsBall::t() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.t)
  return _internal_t();
}
inline void PointAsBall::_internal_set_t(int32_t value) {
  
  t_ = value;
}
inline void PointAsBall::set_t(int32_t value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.t)
}

// string label = 6;
inline void PointAsBall::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& PointAsBall::label() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PointAsBall::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.label)
}
inline std::string* PointAsBall::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:transfers_graphics_protocol.PointAsBall.label)
  return _s;
}
inline const std::string& PointAsBall::_internal_label() const {
  return label_.Get();
}
inline void PointAsBall::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PointAsBall::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PointAsBall::release_label() {
  // @@protoc_insertion_point(field_release:transfers_graphics_protocol.PointAsBall.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PointAsBall::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transfers_graphics_protocol.PointAsBall.label)
}

// float color_r = 7;
inline void PointAsBall::clear_color_r() {
  color_r_ = 0;
}
inline float PointAsBall::_internal_color_r() const {
  return color_r_;
}
inline float PointAsBall::color_r() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.color_r)
  return _internal_color_r();
}
inline void PointAsBall::_internal_set_color_r(float value) {
  
  color_r_ = value;
}
inline void PointAsBall::set_color_r(float value) {
  _internal_set_color_r(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.color_r)
}

// float color_g = 8;
inline void PointAsBall::clear_color_g() {
  color_g_ = 0;
}
inline float PointAsBall::_internal_color_g() const {
  return color_g_;
}
inline float PointAsBall::color_g() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.color_g)
  return _internal_color_g();
}
inline void PointAsBall::_internal_set_color_g(float value) {
  
  color_g_ = value;
}
inline void PointAsBall::set_color_g(float value) {
  _internal_set_color_g(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.color_g)
}

// float color_b = 9;
inline void PointAsBall::clear_color_b() {
  color_b_ = 0;
}
inline float PointAsBall::_internal_color_b() const {
  return color_b_;
}
inline float PointAsBall::color_b() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.color_b)
  return _internal_color_b();
}
inline void PointAsBall::_internal_set_color_b(float value) {
  
  color_b_ = value;
}
inline void PointAsBall::set_color_b(float value) {
  _internal_set_color_b(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.color_b)
}

// float radius = 10;
inline void PointAsBall::clear_radius() {
  radius_ = 0;
}
inline float PointAsBall::_internal_radius() const {
  return radius_;
}
inline float PointAsBall::radius() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsBall.radius)
  return _internal_radius();
}
inline void PointAsBall::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void PointAsBall::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsBall.radius)
}

// -------------------------------------------------------------------

// PointAsEllipsoid

// uint64 ID = 1;
inline void PointAsEllipsoid::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t PointAsEllipsoid::_internal_id() const {
  return id_;
}
inline uint64_t PointAsEllipsoid::id() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.ID)
  return _internal_id();
}
inline void PointAsEllipsoid::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void PointAsEllipsoid::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.ID)
}

// float x = 2;
inline void PointAsEllipsoid::clear_x() {
  x_ = 0;
}
inline float PointAsEllipsoid::_internal_x() const {
  return x_;
}
inline float PointAsEllipsoid::x() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.x)
  return _internal_x();
}
inline void PointAsEllipsoid::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PointAsEllipsoid::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.x)
}

// float y = 3;
inline void PointAsEllipsoid::clear_y() {
  y_ = 0;
}
inline float PointAsEllipsoid::_internal_y() const {
  return y_;
}
inline float PointAsEllipsoid::y() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.y)
  return _internal_y();
}
inline void PointAsEllipsoid::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PointAsEllipsoid::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.y)
}

// float z = 4;
inline void PointAsEllipsoid::clear_z() {
  z_ = 0;
}
inline float PointAsEllipsoid::_internal_z() const {
  return z_;
}
inline float PointAsEllipsoid::z() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.z)
  return _internal_z();
}
inline void PointAsEllipsoid::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PointAsEllipsoid::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.z)
}

// int32 t = 5;
inline void PointAsEllipsoid::clear_t() {
  t_ = 0;
}
inline int32_t PointAsEllipsoid::_internal_t() const {
  return t_;
}
inline int32_t PointAsEllipsoid::t() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.t)
  return _internal_t();
}
inline void PointAsEllipsoid::_internal_set_t(int32_t value) {
  
  t_ = value;
}
inline void PointAsEllipsoid::set_t(int32_t value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.t)
}

// string label = 6;
inline void PointAsEllipsoid::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& PointAsEllipsoid::label() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PointAsEllipsoid::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.label)
}
inline std::string* PointAsEllipsoid::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:transfers_graphics_protocol.PointAsEllipsoid.label)
  return _s;
}
inline const std::string& PointAsEllipsoid::_internal_label() const {
  return label_.Get();
}
inline void PointAsEllipsoid::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PointAsEllipsoid::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PointAsEllipsoid::release_label() {
  // @@protoc_insertion_point(field_release:transfers_graphics_protocol.PointAsEllipsoid.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PointAsEllipsoid::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transfers_graphics_protocol.PointAsEllipsoid.label)
}

// float color_r = 7;
inline void PointAsEllipsoid::clear_color_r() {
  color_r_ = 0;
}
inline float PointAsEllipsoid::_internal_color_r() const {
  return color_r_;
}
inline float PointAsEllipsoid::color_r() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.color_r)
  return _internal_color_r();
}
inline void PointAsEllipsoid::_internal_set_color_r(float value) {
  
  color_r_ = value;
}
inline void PointAsEllipsoid::set_color_r(float value) {
  _internal_set_color_r(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.color_r)
}

// float color_g = 8;
inline void PointAsEllipsoid::clear_color_g() {
  color_g_ = 0;
}
inline float PointAsEllipsoid::_internal_color_g() const {
  return color_g_;
}
inline float PointAsEllipsoid::color_g() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.color_g)
  return _internal_color_g();
}
inline void PointAsEllipsoid::_internal_set_color_g(float value) {
  
  color_g_ = value;
}
inline void PointAsEllipsoid::set_color_g(float value) {
  _internal_set_color_g(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.color_g)
}

// float color_b = 9;
inline void PointAsEllipsoid::clear_color_b() {
  color_b_ = 0;
}
inline float PointAsEllipsoid::_internal_color_b() const {
  return color_b_;
}
inline float PointAsEllipsoid::color_b() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.color_b)
  return _internal_color_b();
}
inline void PointAsEllipsoid::_internal_set_color_b(float value) {
  
  color_b_ = value;
}
inline void PointAsEllipsoid::set_color_b(float value) {
  _internal_set_color_b(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.color_b)
}

// repeated float mat_elem = 10;
inline int PointAsEllipsoid::_internal_mat_elem_size() const {
  return mat_elem_.size();
}
inline int PointAsEllipsoid::mat_elem_size() const {
  return _internal_mat_elem_size();
}
inline void PointAsEllipsoid::clear_mat_elem() {
  mat_elem_.Clear();
}
inline float PointAsEllipsoid::_internal_mat_elem(int index) const {
  return mat_elem_.Get(index);
}
inline float PointAsEllipsoid::mat_elem(int index) const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.PointAsEllipsoid.mat_elem)
  return _internal_mat_elem(index);
}
inline void PointAsEllipsoid::set_mat_elem(int index, float value) {
  mat_elem_.Set(index, value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.PointAsEllipsoid.mat_elem)
}
inline void PointAsEllipsoid::_internal_add_mat_elem(float value) {
  mat_elem_.Add(value);
}
inline void PointAsEllipsoid::add_mat_elem(float value) {
  _internal_add_mat_elem(value);
  // @@protoc_insertion_point(field_add:transfers_graphics_protocol.PointAsEllipsoid.mat_elem)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PointAsEllipsoid::_internal_mat_elem() const {
  return mat_elem_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PointAsEllipsoid::mat_elem() const {
  // @@protoc_insertion_point(field_list:transfers_graphics_protocol.PointAsEllipsoid.mat_elem)
  return _internal_mat_elem();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PointAsEllipsoid::_internal_mutable_mat_elem() {
  return &mat_elem_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PointAsEllipsoid::mutable_mat_elem() {
  // @@protoc_insertion_point(field_mutable_list:transfers_graphics_protocol.PointAsEllipsoid.mat_elem)
  return _internal_mutable_mat_elem();
}

// -------------------------------------------------------------------

// LineWithPositions

// uint64 ID = 1;
inline void LineWithPositions::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t LineWithPositions::_internal_id() const {
  return id_;
}
inline uint64_t LineWithPositions::id() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.ID)
  return _internal_id();
}
inline void LineWithPositions::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void LineWithPositions::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.ID)
}

// float from_x = 2;
inline void LineWithPositions::clear_from_x() {
  from_x_ = 0;
}
inline float LineWithPositions::_internal_from_x() const {
  return from_x_;
}
inline float LineWithPositions::from_x() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.from_x)
  return _internal_from_x();
}
inline void LineWithPositions::_internal_set_from_x(float value) {
  
  from_x_ = value;
}
inline void LineWithPositions::set_from_x(float value) {
  _internal_set_from_x(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.from_x)
}

// float from_y = 3;
inline void LineWithPositions::clear_from_y() {
  from_y_ = 0;
}
inline float LineWithPositions::_internal_from_y() const {
  return from_y_;
}
inline float LineWithPositions::from_y() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.from_y)
  return _internal_from_y();
}
inline void LineWithPositions::_internal_set_from_y(float value) {
  
  from_y_ = value;
}
inline void LineWithPositions::set_from_y(float value) {
  _internal_set_from_y(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.from_y)
}

// float from_z = 4;
inline void LineWithPositions::clear_from_z() {
  from_z_ = 0;
}
inline float LineWithPositions::_internal_from_z() const {
  return from_z_;
}
inline float LineWithPositions::from_z() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.from_z)
  return _internal_from_z();
}
inline void LineWithPositions::_internal_set_from_z(float value) {
  
  from_z_ = value;
}
inline void LineWithPositions::set_from_z(float value) {
  _internal_set_from_z(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.from_z)
}

// float to_x = 5;
inline void LineWithPositions::clear_to_x() {
  to_x_ = 0;
}
inline float LineWithPositions::_internal_to_x() const {
  return to_x_;
}
inline float LineWithPositions::to_x() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.to_x)
  return _internal_to_x();
}
inline void LineWithPositions::_internal_set_to_x(float value) {
  
  to_x_ = value;
}
inline void LineWithPositions::set_to_x(float value) {
  _internal_set_to_x(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.to_x)
}

// float to_y = 6;
inline void LineWithPositions::clear_to_y() {
  to_y_ = 0;
}
inline float LineWithPositions::_internal_to_y() const {
  return to_y_;
}
inline float LineWithPositions::to_y() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.to_y)
  return _internal_to_y();
}
inline void LineWithPositions::_internal_set_to_y(float value) {
  
  to_y_ = value;
}
inline void LineWithPositions::set_to_y(float value) {
  _internal_set_to_y(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.to_y)
}

// float to_z = 7;
inline void LineWithPositions::clear_to_z() {
  to_z_ = 0;
}
inline float LineWithPositions::_internal_to_z() const {
  return to_z_;
}
inline float LineWithPositions::to_z() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.to_z)
  return _internal_to_z();
}
inline void LineWithPositions::_internal_set_to_z(float value) {
  
  to_z_ = value;
}
inline void LineWithPositions::set_to_z(float value) {
  _internal_set_to_z(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.to_z)
}

// string label = 8;
inline void LineWithPositions::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& LineWithPositions::label() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LineWithPositions::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.label)
}
inline std::string* LineWithPositions::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:transfers_graphics_protocol.LineWithPositions.label)
  return _s;
}
inline const std::string& LineWithPositions::_internal_label() const {
  return label_.Get();
}
inline void LineWithPositions::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LineWithPositions::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LineWithPositions::release_label() {
  // @@protoc_insertion_point(field_release:transfers_graphics_protocol.LineWithPositions.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LineWithPositions::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transfers_graphics_protocol.LineWithPositions.label)
}

// float color_r = 9;
inline void LineWithPositions::clear_color_r() {
  color_r_ = 0;
}
inline float LineWithPositions::_internal_color_r() const {
  return color_r_;
}
inline float LineWithPositions::color_r() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.color_r)
  return _internal_color_r();
}
inline void LineWithPositions::_internal_set_color_r(float value) {
  
  color_r_ = value;
}
inline void LineWithPositions::set_color_r(float value) {
  _internal_set_color_r(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.color_r)
}

// float color_g = 10;
inline void LineWithPositions::clear_color_g() {
  color_g_ = 0;
}
inline float LineWithPositions::_internal_color_g() const {
  return color_g_;
}
inline float LineWithPositions::color_g() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.color_g)
  return _internal_color_g();
}
inline void LineWithPositions::_internal_set_color_g(float value) {
  
  color_g_ = value;
}
inline void LineWithPositions::set_color_g(float value) {
  _internal_set_color_g(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.color_g)
}

// float color_b = 11;
inline void LineWithPositions::clear_color_b() {
  color_b_ = 0;
}
inline float LineWithPositions::_internal_color_b() const {
  return color_b_;
}
inline float LineWithPositions::color_b() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.color_b)
  return _internal_color_b();
}
inline void LineWithPositions::_internal_set_color_b(float value) {
  
  color_b_ = value;
}
inline void LineWithPositions::set_color_b(float value) {
  _internal_set_color_b(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.color_b)
}

// float radius = 12;
inline void LineWithPositions::clear_radius() {
  radius_ = 0;
}
inline float LineWithPositions::_internal_radius() const {
  return radius_;
}
inline float LineWithPositions::radius() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithPositions.radius)
  return _internal_radius();
}
inline void LineWithPositions::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void LineWithPositions::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithPositions.radius)
}

// -------------------------------------------------------------------

// LineWithIDs

// uint64 ID = 1;
inline void LineWithIDs::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t LineWithIDs::_internal_id() const {
  return id_;
}
inline uint64_t LineWithIDs::id() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithIDs.ID)
  return _internal_id();
}
inline void LineWithIDs::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void LineWithIDs::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithIDs.ID)
}

// uint64 from_pointID = 2;
inline void LineWithIDs::clear_from_pointid() {
  from_pointid_ = uint64_t{0u};
}
inline uint64_t LineWithIDs::_internal_from_pointid() const {
  return from_pointid_;
}
inline uint64_t LineWithIDs::from_pointid() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithIDs.from_pointID)
  return _internal_from_pointid();
}
inline void LineWithIDs::_internal_set_from_pointid(uint64_t value) {
  
  from_pointid_ = value;
}
inline void LineWithIDs::set_from_pointid(uint64_t value) {
  _internal_set_from_pointid(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithIDs.from_pointID)
}

// uint64 to_pointID = 3;
inline void LineWithIDs::clear_to_pointid() {
  to_pointid_ = uint64_t{0u};
}
inline uint64_t LineWithIDs::_internal_to_pointid() const {
  return to_pointid_;
}
inline uint64_t LineWithIDs::to_pointid() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithIDs.to_pointID)
  return _internal_to_pointid();
}
inline void LineWithIDs::_internal_set_to_pointid(uint64_t value) {
  
  to_pointid_ = value;
}
inline void LineWithIDs::set_to_pointid(uint64_t value) {
  _internal_set_to_pointid(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithIDs.to_pointID)
}

// string label = 4;
inline void LineWithIDs::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& LineWithIDs::label() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithIDs.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LineWithIDs::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithIDs.label)
}
inline std::string* LineWithIDs::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:transfers_graphics_protocol.LineWithIDs.label)
  return _s;
}
inline const std::string& LineWithIDs::_internal_label() const {
  return label_.Get();
}
inline void LineWithIDs::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LineWithIDs::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LineWithIDs::release_label() {
  // @@protoc_insertion_point(field_release:transfers_graphics_protocol.LineWithIDs.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LineWithIDs::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transfers_graphics_protocol.LineWithIDs.label)
}

// float color_r = 5;
inline void LineWithIDs::clear_color_r() {
  color_r_ = 0;
}
inline float LineWithIDs::_internal_color_r() const {
  return color_r_;
}
inline float LineWithIDs::color_r() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithIDs.color_r)
  return _internal_color_r();
}
inline void LineWithIDs::_internal_set_color_r(float value) {
  
  color_r_ = value;
}
inline void LineWithIDs::set_color_r(float value) {
  _internal_set_color_r(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithIDs.color_r)
}

// float color_g = 6;
inline void LineWithIDs::clear_color_g() {
  color_g_ = 0;
}
inline float LineWithIDs::_internal_color_g() const {
  return color_g_;
}
inline float LineWithIDs::color_g() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithIDs.color_g)
  return _internal_color_g();
}
inline void LineWithIDs::_internal_set_color_g(float value) {
  
  color_g_ = value;
}
inline void LineWithIDs::set_color_g(float value) {
  _internal_set_color_g(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithIDs.color_g)
}

// float color_b = 7;
inline void LineWithIDs::clear_color_b() {
  color_b_ = 0;
}
inline float LineWithIDs::_internal_color_b() const {
  return color_b_;
}
inline float LineWithIDs::color_b() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithIDs.color_b)
  return _internal_color_b();
}
inline void LineWithIDs::_internal_set_color_b(float value) {
  
  color_b_ = value;
}
inline void LineWithIDs::set_color_b(float value) {
  _internal_set_color_b(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithIDs.color_b)
}

// float radius = 8;
inline void LineWithIDs::clear_radius() {
  radius_ = 0;
}
inline float LineWithIDs::_internal_radius() const {
  return radius_;
}
inline float LineWithIDs::radius() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.LineWithIDs.radius)
  return _internal_radius();
}
inline void LineWithIDs::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void LineWithIDs::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.LineWithIDs.radius)
}

// -------------------------------------------------------------------

// TickMessage

// string message = 1;
inline void TickMessage::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& TickMessage::message() const {
  // @@protoc_insertion_point(field_get:transfers_graphics_protocol.TickMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transfers_graphics_protocol.TickMessage.message)
}
inline std::string* TickMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:transfers_graphics_protocol.TickMessage.message)
  return _s;
}
inline const std::string& TickMessage::_internal_message() const {
  return message_.Get();
}
inline void TickMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickMessage::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickMessage::release_message() {
  // @@protoc_insertion_point(field_release:transfers_graphics_protocol.TickMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transfers_graphics_protocol.TickMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transfers_graphics_protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_points_5fand_5flines_2eproto
