// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: points_and_lines.proto
#ifndef GRPC_points_5fand_5flines_2eproto__INCLUDED
#define GRPC_points_5fand_5flines_2eproto__INCLUDED

#include "points_and_lines.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace transfers_graphics_protocol {

class PointsAndLines final {
 public:
  static constexpr char const* service_full_name() {
    return "transfers_graphics_protocol.PointsAndLines";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::PointAsBall>> sendBall(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::PointAsBall>>(sendBallRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsBall>> AsyncsendBall(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsBall>>(AsyncsendBallRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsBall>> PrepareAsyncsendBall(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsBall>>(PrepareAsyncsendBallRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::PointAsEllipsoid>> sendEllipsoid(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::PointAsEllipsoid>>(sendEllipsoidRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsEllipsoid>> AsyncsendEllipsoid(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsEllipsoid>>(AsyncsendEllipsoidRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsEllipsoid>> PrepareAsyncsendEllipsoid(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsEllipsoid>>(PrepareAsyncsendEllipsoidRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::LineWithPositions>> sendLineWithPos(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::LineWithPositions>>(sendLineWithPosRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithPositions>> AsyncsendLineWithPos(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithPositions>>(AsyncsendLineWithPosRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithPositions>> PrepareAsyncsendLineWithPos(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithPositions>>(PrepareAsyncsendLineWithPosRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::LineWithIDs>> sendLineWithIDs(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::LineWithIDs>>(sendLineWithIDsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithIDs>> AsyncsendLineWithIDs(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithIDs>>(AsyncsendLineWithIDsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithIDs>> PrepareAsyncsendLineWithIDs(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithIDs>>(PrepareAsyncsendLineWithIDsRaw(context, response, cq));
    }
    virtual ::grpc::Status sendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::transfers_graphics_protocol::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transfers_graphics_protocol::Empty>> AsyncsendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transfers_graphics_protocol::Empty>>(AsyncsendTickRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transfers_graphics_protocol::Empty>> PrepareAsyncsendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::transfers_graphics_protocol::Empty>>(PrepareAsyncsendTickRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void sendBall(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientWriteReactor< ::transfers_graphics_protocol::PointAsBall>* reactor) = 0;
      virtual void sendEllipsoid(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientWriteReactor< ::transfers_graphics_protocol::PointAsEllipsoid>* reactor) = 0;
      virtual void sendLineWithPos(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientWriteReactor< ::transfers_graphics_protocol::LineWithPositions>* reactor) = 0;
      virtual void sendLineWithIDs(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientWriteReactor< ::transfers_graphics_protocol::LineWithIDs>* reactor) = 0;
      virtual void sendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage* request, ::transfers_graphics_protocol::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage* request, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::PointAsBall>* sendBallRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsBall>* AsyncsendBallRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsBall>* PrepareAsyncsendBallRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::PointAsEllipsoid>* sendEllipsoidRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsEllipsoid>* AsyncsendEllipsoidRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::PointAsEllipsoid>* PrepareAsyncsendEllipsoidRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::LineWithPositions>* sendLineWithPosRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithPositions>* AsyncsendLineWithPosRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithPositions>* PrepareAsyncsendLineWithPosRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::transfers_graphics_protocol::LineWithIDs>* sendLineWithIDsRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithIDs>* AsyncsendLineWithIDsRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::transfers_graphics_protocol::LineWithIDs>* PrepareAsyncsendLineWithIDsRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transfers_graphics_protocol::Empty>* AsyncsendTickRaw(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::transfers_graphics_protocol::Empty>* PrepareAsyncsendTickRaw(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::transfers_graphics_protocol::PointAsBall>> sendBall(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::transfers_graphics_protocol::PointAsBall>>(sendBallRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsBall>> AsyncsendBall(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsBall>>(AsyncsendBallRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsBall>> PrepareAsyncsendBall(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsBall>>(PrepareAsyncsendBallRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::transfers_graphics_protocol::PointAsEllipsoid>> sendEllipsoid(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::transfers_graphics_protocol::PointAsEllipsoid>>(sendEllipsoidRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsEllipsoid>> AsyncsendEllipsoid(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsEllipsoid>>(AsyncsendEllipsoidRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsEllipsoid>> PrepareAsyncsendEllipsoid(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsEllipsoid>>(PrepareAsyncsendEllipsoidRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::transfers_graphics_protocol::LineWithPositions>> sendLineWithPos(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::transfers_graphics_protocol::LineWithPositions>>(sendLineWithPosRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithPositions>> AsyncsendLineWithPos(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithPositions>>(AsyncsendLineWithPosRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithPositions>> PrepareAsyncsendLineWithPos(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithPositions>>(PrepareAsyncsendLineWithPosRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::transfers_graphics_protocol::LineWithIDs>> sendLineWithIDs(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::transfers_graphics_protocol::LineWithIDs>>(sendLineWithIDsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithIDs>> AsyncsendLineWithIDs(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithIDs>>(AsyncsendLineWithIDsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithIDs>> PrepareAsyncsendLineWithIDs(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithIDs>>(PrepareAsyncsendLineWithIDsRaw(context, response, cq));
    }
    ::grpc::Status sendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::transfers_graphics_protocol::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transfers_graphics_protocol::Empty>> AsyncsendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transfers_graphics_protocol::Empty>>(AsyncsendTickRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transfers_graphics_protocol::Empty>> PrepareAsyncsendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::transfers_graphics_protocol::Empty>>(PrepareAsyncsendTickRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void sendBall(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientWriteReactor< ::transfers_graphics_protocol::PointAsBall>* reactor) override;
      void sendEllipsoid(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientWriteReactor< ::transfers_graphics_protocol::PointAsEllipsoid>* reactor) override;
      void sendLineWithPos(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientWriteReactor< ::transfers_graphics_protocol::LineWithPositions>* reactor) override;
      void sendLineWithIDs(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientWriteReactor< ::transfers_graphics_protocol::LineWithIDs>* reactor) override;
      void sendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage* request, ::transfers_graphics_protocol::Empty* response, std::function<void(::grpc::Status)>) override;
      void sendTick(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage* request, ::transfers_graphics_protocol::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::transfers_graphics_protocol::PointAsBall>* sendBallRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsBall>* AsyncsendBallRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsBall>* PrepareAsyncsendBallRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::transfers_graphics_protocol::PointAsEllipsoid>* sendEllipsoidRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsEllipsoid>* AsyncsendEllipsoidRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::PointAsEllipsoid>* PrepareAsyncsendEllipsoidRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::transfers_graphics_protocol::LineWithPositions>* sendLineWithPosRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithPositions>* AsyncsendLineWithPosRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithPositions>* PrepareAsyncsendLineWithPosRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::transfers_graphics_protocol::LineWithIDs>* sendLineWithIDsRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithIDs>* AsyncsendLineWithIDsRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::transfers_graphics_protocol::LineWithIDs>* PrepareAsyncsendLineWithIDsRaw(::grpc::ClientContext* context, ::transfers_graphics_protocol::Empty* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::transfers_graphics_protocol::Empty>* AsyncsendTickRaw(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::transfers_graphics_protocol::Empty>* PrepareAsyncsendTickRaw(::grpc::ClientContext* context, const ::transfers_graphics_protocol::TickMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendBall_;
    const ::grpc::internal::RpcMethod rpcmethod_sendEllipsoid_;
    const ::grpc::internal::RpcMethod rpcmethod_sendLineWithPos_;
    const ::grpc::internal::RpcMethod rpcmethod_sendLineWithIDs_;
    const ::grpc::internal::RpcMethod rpcmethod_sendTick_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status sendBall(::grpc::ServerContext* context, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsBall>* reader, ::transfers_graphics_protocol::Empty* response);
    virtual ::grpc::Status sendEllipsoid(::grpc::ServerContext* context, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsEllipsoid>* reader, ::transfers_graphics_protocol::Empty* response);
    virtual ::grpc::Status sendLineWithPos(::grpc::ServerContext* context, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithPositions>* reader, ::transfers_graphics_protocol::Empty* response);
    virtual ::grpc::Status sendLineWithIDs(::grpc::ServerContext* context, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithIDs>* reader, ::transfers_graphics_protocol::Empty* response);
    virtual ::grpc::Status sendTick(::grpc::ServerContext* context, const ::transfers_graphics_protocol::TickMessage* request, ::transfers_graphics_protocol::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendBall() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendBall(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsBall>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendBall(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::transfers_graphics_protocol::Empty, ::transfers_graphics_protocol::PointAsBall>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendEllipsoid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendEllipsoid() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_sendEllipsoid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEllipsoid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsEllipsoid>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendEllipsoid(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::transfers_graphics_protocol::Empty, ::transfers_graphics_protocol::PointAsEllipsoid>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendLineWithPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendLineWithPos() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_sendLineWithPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithPos(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithPositions>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendLineWithPos(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::transfers_graphics_protocol::Empty, ::transfers_graphics_protocol::LineWithPositions>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendLineWithIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendLineWithIDs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_sendLineWithIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithIDs(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithIDs>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendLineWithIDs(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::transfers_graphics_protocol::Empty, ::transfers_graphics_protocol::LineWithIDs>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendTick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendTick() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_sendTick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendTick(::grpc::ServerContext* /*context*/, const ::transfers_graphics_protocol::TickMessage* /*request*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendTick(::grpc::ServerContext* context, ::transfers_graphics_protocol::TickMessage* request, ::grpc::ServerAsyncResponseWriter< ::transfers_graphics_protocol::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendBall<WithAsyncMethod_sendEllipsoid<WithAsyncMethod_sendLineWithPos<WithAsyncMethod_sendLineWithIDs<WithAsyncMethod_sendTick<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_sendBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendBall() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::transfers_graphics_protocol::PointAsBall, ::transfers_graphics_protocol::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, ::transfers_graphics_protocol::Empty* response) { return this->sendBall(context, response); }));
    }
    ~WithCallbackMethod_sendBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendBall(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsBall>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::transfers_graphics_protocol::PointAsBall>* sendBall(
      ::grpc::CallbackServerContext* /*context*/, ::transfers_graphics_protocol::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendEllipsoid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendEllipsoid() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::transfers_graphics_protocol::PointAsEllipsoid, ::transfers_graphics_protocol::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, ::transfers_graphics_protocol::Empty* response) { return this->sendEllipsoid(context, response); }));
    }
    ~WithCallbackMethod_sendEllipsoid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEllipsoid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsEllipsoid>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::transfers_graphics_protocol::PointAsEllipsoid>* sendEllipsoid(
      ::grpc::CallbackServerContext* /*context*/, ::transfers_graphics_protocol::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendLineWithPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendLineWithPos() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::transfers_graphics_protocol::LineWithPositions, ::transfers_graphics_protocol::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, ::transfers_graphics_protocol::Empty* response) { return this->sendLineWithPos(context, response); }));
    }
    ~WithCallbackMethod_sendLineWithPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithPos(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithPositions>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::transfers_graphics_protocol::LineWithPositions>* sendLineWithPos(
      ::grpc::CallbackServerContext* /*context*/, ::transfers_graphics_protocol::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendLineWithIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendLineWithIDs() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::transfers_graphics_protocol::LineWithIDs, ::transfers_graphics_protocol::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, ::transfers_graphics_protocol::Empty* response) { return this->sendLineWithIDs(context, response); }));
    }
    ~WithCallbackMethod_sendLineWithIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithIDs(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithIDs>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::transfers_graphics_protocol::LineWithIDs>* sendLineWithIDs(
      ::grpc::CallbackServerContext* /*context*/, ::transfers_graphics_protocol::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendTick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendTick() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::transfers_graphics_protocol::TickMessage, ::transfers_graphics_protocol::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::transfers_graphics_protocol::TickMessage* request, ::transfers_graphics_protocol::Empty* response) { return this->sendTick(context, request, response); }));}
    void SetMessageAllocatorFor_sendTick(
        ::grpc::MessageAllocator< ::transfers_graphics_protocol::TickMessage, ::transfers_graphics_protocol::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::transfers_graphics_protocol::TickMessage, ::transfers_graphics_protocol::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendTick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendTick(::grpc::ServerContext* /*context*/, const ::transfers_graphics_protocol::TickMessage* /*request*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendTick(
      ::grpc::CallbackServerContext* /*context*/, const ::transfers_graphics_protocol::TickMessage* /*request*/, ::transfers_graphics_protocol::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_sendBall<WithCallbackMethod_sendEllipsoid<WithCallbackMethod_sendLineWithPos<WithCallbackMethod_sendLineWithIDs<WithCallbackMethod_sendTick<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendBall() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendBall(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsBall>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendEllipsoid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendEllipsoid() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_sendEllipsoid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEllipsoid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsEllipsoid>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendLineWithPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendLineWithPos() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_sendLineWithPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithPos(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithPositions>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendLineWithIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendLineWithIDs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_sendLineWithIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithIDs(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithIDs>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendTick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendTick() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_sendTick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendTick(::grpc::ServerContext* /*context*/, const ::transfers_graphics_protocol::TickMessage* /*request*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendBall() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendBall(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsBall>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendBall(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendEllipsoid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendEllipsoid() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_sendEllipsoid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEllipsoid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsEllipsoid>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendEllipsoid(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendLineWithPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendLineWithPos() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_sendLineWithPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithPos(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithPositions>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendLineWithPos(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendLineWithIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendLineWithIDs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_sendLineWithIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithIDs(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithIDs>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendLineWithIDs(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendTick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendTick() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_sendTick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendTick(::grpc::ServerContext* /*context*/, const ::transfers_graphics_protocol::TickMessage* /*request*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendTick(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendBall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendBall() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->sendBall(context, response); }));
    }
    ~WithRawCallbackMethod_sendBall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendBall(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsBall>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* sendBall(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendEllipsoid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendEllipsoid() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->sendEllipsoid(context, response); }));
    }
    ~WithRawCallbackMethod_sendEllipsoid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendEllipsoid(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::PointAsEllipsoid>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* sendEllipsoid(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendLineWithPos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendLineWithPos() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->sendLineWithPos(context, response); }));
    }
    ~WithRawCallbackMethod_sendLineWithPos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithPos(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithPositions>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* sendLineWithPos(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendLineWithIDs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendLineWithIDs() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->sendLineWithIDs(context, response); }));
    }
    ~WithRawCallbackMethod_sendLineWithIDs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLineWithIDs(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::transfers_graphics_protocol::LineWithIDs>* /*reader*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* sendLineWithIDs(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendTick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendTick() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendTick(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendTick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendTick(::grpc::ServerContext* /*context*/, const ::transfers_graphics_protocol::TickMessage* /*request*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendTick(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendTick : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendTick() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::transfers_graphics_protocol::TickMessage, ::transfers_graphics_protocol::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::transfers_graphics_protocol::TickMessage, ::transfers_graphics_protocol::Empty>* streamer) {
                       return this->StreamedsendTick(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendTick() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendTick(::grpc::ServerContext* /*context*/, const ::transfers_graphics_protocol::TickMessage* /*request*/, ::transfers_graphics_protocol::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendTick(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::transfers_graphics_protocol::TickMessage,::transfers_graphics_protocol::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendTick<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendTick<Service > StreamedService;
};

}  // namespace transfers_graphics_protocol


#endif  // GRPC_points_5fand_5flines_2eproto__INCLUDED
